import json
import argparse
from pathlib import Path
from typing import Dict, Any, List
import logging

def log_print(text):
    print(text)
    logging.info(f"{text}")
    
UNITS_DAT_MAPPING = {
    # === Vanilla fields ===
    0: "Flingy",
    1: "Subunit",
    2: "Subunit 2",
    3: "Infestation",
    4: "Construction image",
    5: "Direction",
    6: "Has shields",
    7: "Shields",
    8: "Hitpoints",
    9: "Elevation level",
    10: "Floating",
    11: "Rank",
    12: "Ai idle order",
    13: "Human idle order",
    14: "Return to idle order",
    15: "Attack unit order",
    16: "Attack move order",
    17: "Ground weapon",
    18: "Ground weapon hits",
    19: "Air weapon",
    20: "Air weapon hits",
    21: "AI flags",
    22: "Flags",
    23: "Target acquisition range",
    24: "Sight range",
    25: "Armor upgrade",
    26: "Armor type",
    27: "Armor",
    28: "Rclick action",
    29: "Ready sound",
    30: "First what sound",
    31: "Last what sound",
    32: "First annoyed sound",
    33: "Last annoyed sound",
    34: "First yes sound",
    35: "Last yes sound",
    36: "Placement box",
    37: "Addon position",
    38: "Dimension box",
    39: "Portrait",
    40: "Mineral cost",
    41: "Gas cost",
    42: "Build time",
    43: "Datreq offset",
    44: "Group flags",
    45: "Supply provided",
    46: "Supply cost",
    47: "Space required",
    48: "Space provided",
    49: "Build score",
    50: "Kill score",
    51: "Map label",
    52: "???",
    53: "Misc flags",
    # === Extended fields ===
    64: "Dat requirement buffer",
    65: "Wireframe mode",
    66: "Wireframe ID",
    67: "Icon ID",
    68: "Buttons",
    69: "Linked Buttons Unit",
    70: "Speed multiplier",
    71: "Ext flags",
    72: "Turret max angle",
    73: "Bunker range bonus",
    74: "Death timer",
    75: "Alternate rank string",
    76: "Max energy",
    77: "Infestation HP percentage",
    78: "AI Building guards",
    83: "Cloak tech",
    84: "Cloak energy regen (usually degen so negative)",
    85: "Ext flags 2 (AI-related)",
}

UNIT_NAME_MAPPING = {
    0: "Terran Marine",
    1: "Terran Ghost",
    2: "Terran Vulture",
    3: "Terran Goliath",
    4: "Goliath Turret",
    5: "Terran Siege Tank",
    6: "Tank Turret",
    7: "Terran SCV",
    8: "Terran Wraith",
    9: "Terran Science Vessel",
    10: "UED EMP Soldier",
    11: "Terran Dropship",
    12: "Terran Battlecruiser",
    13: "Spider Mine",
    14: "Nuclear Missile",
    15: "Terran Civilian",
    16: "UED Phantom",
    17: "UED Todesritter",
    18: "Todesritter Turret",
    19: "UED Scorpion",
    20: "Infested Marine",
    21: "UED Skywing",
    22: "Magellan",
    23: "UED Panzer",
    24: "Schmalturm Turret",
    25: "UED Panzer",
    26: "Schmalturm Turret",
    27: "Arcturus Mengsk",
    28: "Hyperion",
    29: "Terran Battlecruiser",
    30: "Terran Siege Tank",
    31: "Tank Turret",
    32: "Terran Firebat",
    33: "Scanner Sweep",
    34: "UED Medic",
    35: "Zerg Larva",
    36: "Zerg Egg",
    37: "Zerg Zergling",
    38: "Zerg Hydralisk",
    39: "Zerg Ultralisk",
    40: "Zerg Broodling",
    41: "Zerg Drone",
    42: "Zerg Overlord",
    43: "Zerg Mutalisk",
    44: "Zerg Guardian",
    45: "Zerg Queen",
    46: "Zerg Defiler",
    47: "Zerg Scourge",
    48: "Torrasque",
    49: "Matriarch",
    50: "Infested Terran",
    51: "Infested Kerrigan",
    52: "Unclean One",
    53: "Hunter Killer",
    54: "Devouring One",
    55: "Kukulza",
    56: "UED Steel Legionnaire",
    57: "Yggdrasill",
    58: "UED Valkyrie",
    59: "Cocoon",
    60: "Protoss Corsair",
    61: "Protoss Dark Templar",
    62: "Zerg Devourer",
    63: "Protoss Dark Archon",
    64: "Protoss Probe",
    65: "Protoss Zealot",
    66: "Protoss Dragoon",
    67: "Protoss High Templar",
    68: "Protoss Archon",
    69: "Protoss Shuttle",
    70: "Protoss Scout",
    71: "Protoss Arbiter",
    72: "Protoss Carrier",
    73: "Protoss Interceptor",
    74: "Protoss Revenant",
    75: "Zeratul",
    76: "Tassadar/Zeratul",
    77: "UED Valhalla",
    78: "Fenix",
    79: "Protoss High Templar",
    80: "Mojo",
    81: "Warbringer",
    82: "Gantrithor",
    83: "Protoss Reaver",
    84: "Protoss Observer",
    85: "Protoss Scarab",
    86: "Protoss Arbiter",
    87: "Aldaris",
    88: "Artanis",
    89: "Rhynadon",
    90: "Bengalaas",
    91: "Unused",
    92: "Protoss Hornet",
    93: "Scantid",
    94: "Kakaru",
    95: "Ragnasaur",
    96: "Ursadon",
    97: "Zerg Lurker Egg",
    98: "Raszagal",
    99: "Samir Duran",
    100: "Alexei Stukov",
    101: "Map Revealer",
    102: "Gerard DuGalle",
    103: "Zerg Lurker",
    104: "Infested Duran",
    105: "Disruption Field",
    106: "Terran Command Center",
    107: "Terran Comsat Station",
    108: "Terran Nuclear Silo",
    109: "Terran Supply Depot",
    110: "Terran Refinery",
    111: "Terran Barracks",
    112: "Terran Academy",
    113: "Terran Factory",
    114: "Terran Starport",
    115: "Terran Control Tower",
    116: "Terran Science Facility",
    117: "Terran Covert Ops",
    118: "Terran Physics Lab",
    119: "Unused Terran Bldg",
    120: "Terran Machine Shop",
    121: "Unused Terran Bldg",
    122: "Terran Engineering Bay",
    123: "Terran Armory",
    124: "Terran Missile Turret",
    125: "Terran Bunker",
    126: "Norad II",
    127: "Orbital Bombard",
    128: "Uraj Crystal",
    129: "Khalis Crystal",
    130: "Infested Command Center",
    131: "Zerg Hatchery",
    132: "Zerg Lair",
    133: "Zerg Hive",
    134: "Zerg Nydus Canal",
    135: "Zerg Hydralisk Den",
    136: "Zerg Defiler Mound",
    137: "Zerg Greater Spire",
    138: "Zerg Queen's Nest",
    139: "Zerg Evolution Chamber",
    140: "Zerg Ultralisk Cavern",
    141: "Zerg Spire",
    142: "Zerg Spawning Pool",
    143: "Zerg Creep Colony",
    144: "Zerg Spore Colony",
    145: "Unused Zerg Bldg",
    146: "Zerg Sunken Colony",
    147: "Zerg Overmind",
    148: "Zerg Overmind",
    149: "Zerg Extractor",
    150: "Mature Chrysalis",
    151: "Zerg Cerebrate",
    152: "Zerg Cerebrate Daggoth",
    153: "Unused Zerg Bldg 5",
    154: "Protoss Nexus",
    155: "Protoss Robotics Facility",
    156: "Protoss Pylon",
    157: "Protoss Assimilator",
    158: "Protoss Unused",
    159: "Protoss Observatory",
    160: "Protoss Gateway",
    161: "Protoss Unused",
    162: "Protoss Photon Cannon",
    163: "Protoss Citadel of Adun",
    164: "Protoss Cybernetics Core",
    165: "Protoss Templar Archives",
    166: "Protoss Forge",
    167: "Protoss Stargate",
    168: "Stasis Cell/Prison",
    169: "Protoss Fleet Beacon",
    170: "Protoss Arbiter Tribunal",
    171: "Protoss Robotics Support Bay",
    172: "Protoss Shield Battery",
    173: "Khaydarin Crystal Formation",
    174: "Protoss Temple",
    175: "Xel'Naga Temple",
    176: "Mineral Field",
    177: "Mineral Field",
    178: "Mineral Field",
    179: "Cave",
    180: "Cave-in",
    181: "Cantina",
    182: "Mining Platform",
    183: "Independent Command Center",
    184: "Independent Starport",
    185: "Jump Gate",
    186: "Ruins",
    187: "Kyadarin Crystal Formation",
    188: "Vespene Geyser",
    189: "Warp Gate",
    190: "Psi Disrupter",
    191: "Zerg Marker",
    192: "Terran Marker",
    193: "Protoss Marker",
    194: "Zerg Beacon",
    195: "Terran Beacon",
    196: "Protoss Beacon",
    197: "Zerg Flag Beacon",
    198: "Terran Flag Beacon",
    199: "Protoss Flag Beacon",
    200: "Power Generator",
    201: "Overmind Cocoon",
    202: "Dark Swarm",
    203: "Floor Missile Trap",
    204: "Floor Hatch (UNUSED)",
    205: "Left Upper Level Door",
    206: "Right Upper Level Door",
    207: "Left Pit Door",
    208: "Right Pit Door",
    209: "Floor Gun Trap",
    210: "Left Wall Missile Trap",
    211: "Left Wall Flame Trap",
    212: "Right Wall Missile Trap",
    213: "Right Wall Flame Trap",
    214: "Start Location",
    215: "Flag",
    216: "Young Chrysalis",
    217: "Psi Emitter",
    218: "Data Disc",
    219: "Khaydarin Crystal",
    220: "Mineral Chunk",
    221: "Mineral Chunk",
    222: "Vespene Orb",
    223: "Vespene Orb",
    224: "Vespene Sac",
    225: "Vespene Sac",
    226: "Vespene Tank",
    # -- Extended units --
    261: "Taar Atril",
    262: "Jim Raynor",
    263: "Norad II",
    264: "Confederate Battlecruiser",
    265: "Leviathan",
    266: "Graff Zeppelin",
    267: "Bismarck",
    268: "Stalingrad",
    269: "UNUSED",
    270: "Infested Kerrigan",
    271: "Infested Kerrigan",
    272: "Tom Kazansky",
    273: "Magellan",
    274: "UNUSED",
    275: "UNUSED"
}

def translate_data(data: List[Dict[str, Any]], mapping: Dict[int, str]) -> List[Dict[str, Any]]:
    translated_list = []
    for entry in data:
        original_data = entry.get("data", {})
        translated_data = {}
        for key, value in original_data.items():
            if key.startswith("field_"):
                try:
                    field_id = int(key.split('_')[1])
                    new_key = mapping.get(field_id, key)
                    translated_data[new_key] = value
                except (ValueError, IndexError):
                    translated_data[key] = value
            else:
                translated_data[key] = value
        
        translated_list.append({
            "index": entry.get("index"),
            "name": UNIT_NAME_MAPPING.get(entry.get("index"), "UNKNOWN"),
            "data": translated_data
        })
        
    return translated_list

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--input_dat", type=Path, required=False, help="Path to text file with copied unit DAT values", default="./input.txt")
    args = parser.parse_args()

    if not args.input_dat.is_file(): #TODO test on Linux
        log_print(f"File does not exist: {args.input_dat}")
        
    try:
        with open(args.input_dat, 'r', encoding='utf-8') as dat_file:
            input_data = json.load(dat_file)
        
        translated_output = translate_data(input_data, UNITS_DAT_MAPPING)
        
        log_print(json.dumps(translated_output, indent=2, ensure_ascii=False))

    except json.JSONDecodeError as json_e:
        log_print(json_e)
        raise json_e
    except Exception as e:
        log_print(e)
        raise e

if __name__ == "__main__":
    logging.basicConfig(format='%(message)s', filename="unitsdat_readable.txt", encoding='utf8', level = logging.INFO)
    logging.FileHandler("unitsdat_readable.txt", mode = "w")
    main()